#!/bin/bash
# deploy-tunnel-b.sh - FIXED VERSION with proper environment loading

set -e

echo "🚇 Setting up Tunnel B for Secure Supabase Access"
echo "================================================="
echo ""

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# FIXED: Proper environment loading
if [ -f .env ]; then
    # Use set -a to automatically export all variables
    set -a
    source .env
    set +a
    echo "✅ Environment variables loaded from .env"
else
    echo "❌ .env file not found"
    exit 1
fi

# Debug: Verify environment variables loaded correctly
echo ""
echo "📋 Verifying environment variables..."
if [ -n "$SUPABASE_URL" ]; then
    echo "✅ SUPABASE_URL loaded: ${SUPABASE_URL:0:30}..."
else
    echo "❌ SUPABASE_URL not loaded"
fi

# Function to check command availability
check_command() {
    if ! command -v $1 &> /dev/null; then
        echo -e "${RED}❌ $1 is not installed${NC}"
        return 1
    fi
    echo -e "${GREEN}✅ $1 is installed${NC}"
    return 0
}

# Function to extract Supabase project reference
extract_project_ref() {
    echo "$1" | sed -n 's|https://\([^.]*\)\.supabase\.co.*|\1|p'
}

echo ""
echo "📋 Step 1: Checking prerequisites..."
echo ""

# Check required commands
check_command "cloudflared" || exit 1
check_command "node" || exit 1
check_command "npm" || exit 1

echo ""
echo "📋 Step 2: Validating environment configuration..."
echo ""

# Check for Tunnel A token
if [ -z "$CLOUDFLARE_TUNNEL_TOKEN" ]; then
    echo -e "${YELLOW}⚠️  CLOUDFLARE_TUNNEL_TOKEN not found (Tunnel A)${NC}"
else
    echo -e "${GREEN}✅ Tunnel A token configured${NC}"
fi

# Check Supabase URL
if [ -z "$SUPABASE_URL" ]; then
    echo -e "${RED}❌ SUPABASE_URL not set in .env${NC}"
    echo "   Found in .env: $(grep '^SUPABASE_URL=' .env || echo 'Not found')"
    exit 1
fi
echo -e "${GREEN}✅ Supabase URL: $SUPABASE_URL${NC}"

# Extract project reference
SUPABASE_PROJECT_REF=$(extract_project_ref "$SUPABASE_URL")
if [ -z "$SUPABASE_PROJECT_REF" ]; then
    echo -e "${RED}❌ Could not extract Supabase project reference from: $SUPABASE_URL${NC}"
    exit 1
fi
echo -e "${GREEN}✅ Project Reference: $SUPABASE_PROJECT_REF${NC}"

echo ""
echo "📋 Step 3: Checking Supabase tunnel configuration..."
echo ""

# Check if tunnel B token exists
if [ -z "$CLOUDFLARE_SUPABASE_TUNNEL_TOKEN" ]; then
    echo -e "${YELLOW}⚠️  CLOUDFLARE_SUPABASE_TUNNEL_TOKEN not found${NC}"
    echo ""
    echo "Creating new tunnel 'supabase-secure-tunnel'..."
    
    # Try to create the tunnel
    OUTPUT=$(cloudflared tunnel create supabase-secure-tunnel 2>&1) || true
    
    if echo "$OUTPUT" | grep -q "already exists"; then
        echo -e "${GREEN}✅ Tunnel already exists${NC}"
    elif echo "$OUTPUT" | grep -q "Created tunnel"; then
        echo -e "${GREEN}✅ Tunnel created successfully${NC}"
        # Extract tunnel ID from output
        TUNNEL_ID=$(echo "$OUTPUT" | grep -oP 'id: \K[a-f0-9-]+' || true)
        if [ -n "$TUNNEL_ID" ]; then
            echo "   Tunnel ID: $TUNNEL_ID"
        fi
    else
        echo "$OUTPUT"
    fi
    
    echo ""
    echo -e "${YELLOW}📌 IMPORTANT: Add the tunnel token to your .env file${NC}"
    echo "1. Go to: https://one.dash.cloudflare.com/"
    echo "2. Navigate to: Zero Trust → Access → Tunnels"
    echo "3. Click on: supabase-secure-tunnel"
    echo "4. Copy the tunnel token"
    echo "5. Add to .env: CLOUDFLARE_SUPABASE_TUNNEL_TOKEN=\"your_token\""
    echo ""
    read -p "Press Enter after adding the token to continue..."
    
    # Reload environment
    set -a
    source .env
    set +a
    
    if [ -z "$CLOUDFLARE_SUPABASE_TUNNEL_TOKEN" ]; then
        echo -e "${RED}❌ Token still not found in .env${NC}"
        exit 1
    fi
else
    echo -e "${GREEN}✅ Tunnel B token already configured${NC}"
    # Use the tunnel ID from the environment if available
    if [ -n "$CLOUDFLARE_SUPABASE_TUNNEL_ID" ]; then
        echo "   Tunnel ID: $CLOUDFLARE_SUPABASE_TUNNEL_ID"
    fi
fi

echo ""
echo "📋 Step 4: Creating tunnel configuration file..."
echo ""

# Create the supabase-tunnel.yml with actual values
cat > supabase-tunnel.yml << EOF
# Supabase Secure Tunnel Configuration
# Auto-generated by deploy-tunnel-b.sh
# Generated at: $(date)

tunnel: supabase-secure-tunnel
credentials-file: ~/.cloudflared/supabase-secure-tunnel.json

ingress:
  - hostname: db-secure.888intelligenceautomation.in
    service: ${SUPABASE_URL}
    originRequest:
      httpHostHeader: ${SUPABASE_PROJECT_REF}.supabase.co
      originServerName: ${SUPABASE_PROJECT_REF}.supabase.co
      noTLSVerify: false
      connectTimeout: 30s
      tlsTimeout: 10s
      tcpKeepAlive: 30s
      keepAliveConnections: 100
      keepAliveTimeout: 90s
      http2Origin: true
  - service: http_status:404

metrics: 0.0.0.0:9091
loglevel: info
grace-period: 30s
retries: 5
EOF

echo -e "${GREEN}✅ Created supabase-tunnel.yml with:${NC}"
echo "   Service URL: $SUPABASE_URL"
echo "   Project: $SUPABASE_PROJECT_REF"

echo ""
echo "📋 Step 5: Configuring DNS..."
echo ""

# Configure DNS route
echo "Adding DNS route for db-secure.888intelligenceautomation.in..."
OUTPUT=$(cloudflared tunnel route dns supabase-secure-tunnel db-secure.888intelligenceautomation.in 2>&1) || true

if echo "$OUTPUT" | grep -q "already exists"; then
    echo -e "${GREEN}✅ DNS route already exists${NC}"
elif echo "$OUTPUT" | grep -q "Added CNAME"; then
    echo -e "${GREEN}✅ DNS route created successfully${NC}"
else
    echo "$OUTPUT"
fi

echo ""
echo "📋 Step 6: Testing tunnel configuration..."
echo ""

# Quick test by running tunnel temporarily
echo "Starting test tunnel (will run for 5 seconds)..."
timeout 5s cloudflared tunnel --config supabase-tunnel.yml run 2>&1 | head -20 &
TUNNEL_PID=$!
sleep 5
kill $TUNNEL_PID 2>/dev/null || true

echo -e "${GREEN}✅ Tunnel configuration validated${NC}"

echo ""
echo "📋 Step 7: Installing Supabase dependencies..."
echo ""

# Check frontend
if ! grep -q "@supabase/supabase-js" package.json 2>/dev/null; then
    echo "Installing @supabase/supabase-js for frontend..."
    npm install @supabase/supabase-js
    echo -e "${GREEN}✅ Frontend Supabase client installed${NC}"
else
    echo -e "${GREEN}✅ Frontend Supabase client already installed${NC}"
fi

# Check backend
if [ -d "backend" ]; then
    cd backend
    if ! grep -q "@supabase/supabase-js" package.json 2>/dev/null; then
        echo "Installing @supabase/supabase-js for backend..."
        npm install @supabase/supabase-js
        echo -e "${GREEN}✅ Backend Supabase client installed${NC}"
    else
        echo -e "${GREEN}✅ Backend Supabase client already installed${NC}"
    fi
    cd ..
fi

echo ""
echo "=============================================="
echo -e "${GREEN}🎉 TUNNEL B SETUP COMPLETE!${NC}"
echo "=============================================="
echo ""
echo "Configuration Summary:"
echo "  Supabase Project: $SUPABASE_PROJECT_REF"
echo "  Tunnel URL: https://db-secure.888intelligenceautomation.in"
echo "  Direct URL: $SUPABASE_URL"
echo ""
echo "📋 NEXT STEPS:"
echo ""
echo "1. ${YELLOW}TEST THE TUNNEL:${NC}"
echo "   node tunnel-manager-dual.js start"
echo ""
echo "2. ${YELLOW}VERIFY SECURITY (Direct access should fail):${NC}"
echo "   curl -I $SUPABASE_URL/rest/v1/"
echo ""
echo "3. ${YELLOW}TEST TUNNEL ACCESS (Should work):${NC}"
echo "   curl -I https://db-secure.888intelligenceautomation.in/rest/v1/"
echo ""
echo "=============================================="

# Save deployment status
cat > tunnel-b-deployment.json << EOF
{
  "deployed_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
  "tunnel_name": "supabase-secure-tunnel",
  "tunnel_url": "https://db-secure.888intelligenceautomation.in",
  "supabase_project": "${SUPABASE_PROJECT_REF}",
  "supabase_url": "${SUPABASE_URL}",
  "status": "configured"
}
EOF

echo ""
echo -e "${GREEN}✅ Deployment complete! Run 'node tunnel-manager-dual.js start' to activate.${NC}"